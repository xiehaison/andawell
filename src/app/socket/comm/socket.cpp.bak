#include "inc.h"

#include "socket.h"



int	CloseSocket(int* Sockno)
{ 
	int ret;

	if(*Sockno == 0)	 return 0;

    shutdown(*Sockno, SD_BOTH);
	#ifdef WIN32
		ret = closesocket(*Sockno);
	#else 
		ret = close(*Sockno);
	#endif
	*Sockno = 0;

	return(ret);
}


int SockRead(int fd, void *buf, int n, int sec)
{
	int nleft,nbytes;
	char*	ptr;
	int selected;
	fd_set	rdset;
	struct timeval wait_time;

	if(fd <= 0) 
        return -1000;

	ptr = (char *)buf;
	nleft = n;
	wait_time.tv_sec = sec;
	wait_time.tv_usec = 0;

	FD_ZERO(&rdset); 
	FD_SET(fd,&rdset);
 
	selected = select(fd+1,&rdset,NULL,NULL,&wait_time); 
	if (selected == 0 || ! FD_ISSET(fd,&rdset)) 
		return ERR_SOCKETREAD; 
			 
	while (nleft > 0)  
	{ 
//		nbytes = recv(fd,ptr,nleft,MSG_OOB);
		nbytes = recv(fd,ptr,nleft,0);
		if (nbytes < 0)
		{ 
#ifndef WIN32
			if (errno == EINTR)
				nbytes = 0; 
			else
#endif			 
				return -2; 
		} 
		else if (nbytes == 0) 
			break; 
		nleft -= nbytes; 
		ptr += nbytes; 
	} 
	return(n-nleft);
} 


int WriteData(int fd, const void *buf, int n)
{
	int nleft,nbytes;
	char *ptr;
	
	#ifdef WIN32
	int errorCode=1, optlen=sizeof(int);
	getsockopt(fd,SOL_SOCKET,SO_ERROR,(char*)&errorCode,(int*)&optlen);
	#else
	int errorCode=1, optlen=sizeof(socklen_t); 
	getsockopt(fd,SOL_SOCKET,SO_ERROR,&errorCode,(socklen_t*)&optlen); 
	#endif

	if(errorCode != 0)
		return -1;

	ptr = (char *)buf;
	nleft=n;
	while (nleft > 0)
	{
		nbytes = send(fd,ptr,nleft,0);

		if(nbytes < 0)
		{
#ifndef WIN32
			if (errno == EINTR)
				nbytes = 0;
			else
#endif			
			{
				return(-2);
			}
		}
		else if (nbytes == 0)
			break;
		nleft -= nbytes;
		ptr += nbytes;
	}

	return(n-nleft);
}

int gConnectContinue = 0;
int gTxRxContinue = 0;


//gRecvPack
int RecvPack()
{
    return 0;
}

int SendPack()
{
    return 0;
}


void comm_txrx_thread(void *param)
{    
    while(gTxRxContinue)
    {
        RecvPack();
        SendPack();
        sleep(1);
    }    
}


void *comm_connect_thread(void *param)
{    
    char rip[256];
    int rport;

	int		status;
	int		sockethd;
	struct sockaddr_in server_addr;
	struct timeval tm;
	fd_set mask;  
    S_Comm *pComm = (class S_Comm *)param;
    strcpy(rip,pComm->GetIP());
    rport = pComm->GetPort();
    sockethd = pComm->GetSockfd();
    
	server_addr.sin_family = AF_INET;
	server_addr.sin_addr.s_addr = inet_addr(rip);
	server_addr.sin_port = htons(rport);
	memset(&(server_addr.sin_zero), 0, 8);
    
	OutputLog("Connect socket remote ip:%s,port:%d ,return code: -2",rip,rport);
	
	tm.tv_sec = CONN_TIMEOUT;
	tm.tv_usec = 0;
    
    if( connect(sockethd, (struct sockaddr *)&server_addr, sizeof(struct sockaddr)) == -1) 
    { 
    	tm.tv_set = CONN_TIMEOUT; 
    	tm.tv_uset = 0; 
    	FD_ZERO(&set); 
    	FD_SET(sockfd, &set); 
    	if( select(sockfd+1, NULL, &set, NULL, &tm) > 0) 
    	{ 
    		getsockopt(sockfd, SOL_SOCKET, SO_ERROR, &error, (socklen_t *)&len); 
    		if(error == 0) {
    			ret = true;
                gTxRxContinue = 1;                
            }
    		else {
    			ret = false; 
            }
    	} 
    	else{ 
    		ret = false; 
        }
    } 
    else{ 
    	ret = true; 
    }
    if(!ret) 
    { 
    	close( sockfd ); 
    	fprintf(stderr , "Cannot Connect the server!n"); 
    	return false; 
    } 
    //开始收发
    ul = 0; 
    ioctl(sockfd, FIONBIO, &ul); //设置为阻塞模式 
        
    while(gConnectContinue)
    {
        
    }
    
}

int initsock()
{
	int		sockethd;

	if ( (sockethd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
	{
		OutputLog("Create socket error! error code %d ", sockethd);
		return -1;
	}

    unsigned long ul = 1; 
    ioctl(sockethd, FIONBIO, &ul); //设置为非阻塞模式 
    
	OutputLog("initsock socket successfully");
    return sickethd;
}


int start_conn_thread()
{
	pthread_attr_t pthread_attr; 
	pthread_t threadId; 

	pthread_attr_init(&pthread_attr);
	pthread_attr_setdetachstate(&pthread_attr,PTHREAD_CREATE_DETACHED); 
	if (pthread_create(&threadId,&pthread_attr,&comm_connect_thread,NULL) != 0) 
	{
		OutputLog("Create comm_connect thread error!!!");
	}
}

int Connect(const char *rip, int rport)
{
	int		status;
	int		sockethd;
	struct sockaddr_in server_addr;
	struct timeval timeout;
	fd_set mask;  
    unsigned long ul = 1; 
	if(rip == "") 
        return 0;

	if ( (sockethd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
	{
		OutputLog("Create socket error! error code %d ", sockethd);
		return -1;
	}

	server_addr.sin_family = AF_INET;
	server_addr.sin_addr.s_addr = inet_addr(rip);
	server_addr.sin_port = htons(rport);
	memset(&(server_addr.sin_zero), 0, 8);
    ioctl(sockethd, FIONBIO, &ul); //设置为非阻塞模式 
    
	OutputLog("Connect socket remote ip:%s,port:%d ,return code: -2",rip,rport);
	
	timeout.tv_sec = CONN_TIMEOUT;
	timeout.tv_usec = 0;

    status = connect(sockethd, (struct sockaddr *)&server_addr, sizeof(struct sockaddr));
    if(status == -1){
        
    	timeout.tv_sec = CONN_TIMEOUT;
    	timeout.tv_usec = 0;
    	FD_ZERO( &mask);
    	FD_SET(sockethd,&mask);        
    }
	else if(status != 0)
	{
		OutputLog("Connect socket error! remote ip:%s:%d ,return code: -2",rip,rport);
		CloseSocket(&sockethd);
		return -1;
	}
	OutputLog("Connect socket ok! remote ip:%s:%d ,return code: -2",rip,rport);

	FD_ZERO( &mask);
	FD_SET(sockethd,&mask);
	status = select(sockethd+1,NULL,& mask,NULL,&timeout);
  	switch(status)
	{
	case -1:
		OutputLog("socket select error! remote ip:%s:%d ,return code: -2",rip,rport);
		FD_CLR(sockethd,&mask);
		CloseSocket(&sockethd);
 		return -2;
	case 0:
	default:
		if(FD_ISSET(sockethd,&mask) )
		{
			#ifdef WIN32
			int errorCode=1,optlen=sizeof(int);
 			getsockopt(sockethd,SOL_SOCKET,SO_ERROR,(char*)&errorCode,(int*)&optlen);
			#else
			int errorCode=1, optlen=sizeof(socklen_t); 
 			getsockopt(sockethd,SOL_SOCKET,SO_ERROR,&errorCode,(socklen_t*)&optlen); 
			#endif

			if(errorCode!=0)
			{
				OutputLog("socket Connect  error! not respond.!remote ip:%s:%d ,return code: -3",rip,rport);
				FD_CLR(sockethd,&mask);
				CloseSocket(&sockethd);
 				return -3;
			}
		}
		else
		{
			OutputLog("socket Connect error! FD_SET() Error,remote ip:%s:%d,return code: -4",rip,rport);
			FD_CLR(sockethd,&mask);
			CloseSocket(&sockethd);

			return -4;
		}
	}
	
	return sockethd;
}